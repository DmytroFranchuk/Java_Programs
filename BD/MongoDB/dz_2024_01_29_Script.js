// Вывести названия двух произвольных треков с тегом new

db.tracks.aggregate([
    { $match: { tags: "new" } },
    { $sample: { size: 2 } },
    { $project: { _id: 0, title: 1 } }
]);

// Вывести имя одного юзера с самым минимальным балансом

db.users.aggregate([
     { $sort: { balance: 1 }},
     { $limit: 1},
     { $project: { _id: 0, fullname: 1 }} 
]);

// Вывести имена юзеров, у которых есть положительный баланс

db.users.aggregate([
    { $match: { balance: { $gt: 0 } } },
    { $project: { _id: 0, fullname: 1 } }
]);

// Используя метод aggregate(), вывести ко-во юзеров с балансом до 1000 EUR

db.users.aggregate([
    { $match: { balance: { $lt: 1000 } } },
    { $count: "totalUsers" }
]);

// Также очень коротко опишите, как работает агрегация в MongoDB

// В MongoDB, агрегация представляет собой процесс обработки данных на сервере базы данных 
// с использованием конвейера агрегации. 
// Конвейер агрегации - это набор этапов обработки, каждый из которых принимает входные данные, 
// выполняет операции и передает результаты на следующий этап.

// Основные этапы агрегации в MongoDB включают:

// $match: Фильтрация документов по определенным критериям.

// $group: Группировка документов на основе заданных ключей, позволяя выполнять агрегацию внутри каждой группы.

// $project: Преобразование документов, включая выбор определенных полей, вычисление выражений и создание новых полей.

// $sort: Сортировка документов.

// $limit и $skip: Ограничение количества возвращаемых результатов и пропуск определенного числа документов.

// $unwind: Разбиение массивов в документах на отдельные документы.

// $lookup: Слияние документов из нескольких коллекций.

// Эти этапы могут быть комбинированы и настроены в конвейере для выполнения сложных операций агрегации данных. 










db.tracks.aggregate();

db.reactions.aggregate();

db.users.aggregate();