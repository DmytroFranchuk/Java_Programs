
//        System.out.println("metod: " + drinks.get(3).getPrice());
//        System.out.println(drinks.get(0));
//        maxKey = Integer.parseInt(i.getCategory().substring(i.getCategory().indexOf("#") + 1));
//        System.out.println(result.get(maxKey));


for (Table i : result) {
                double cost = i.getPrice() * i.getQuantity();
                if (cost > maxCost) {
                    maxCost = cost;
                    maxKey = result.indexOf(i);
                } else {
                    int res = result.indexOf(i);
                    result.remove(res);
                }
            }

            //            Iterator<Table> iterator = result.iterator();
            //            while (iterator.hasNext()) {
            //                Table i = iterator.next();
            //                if (!i.equals(maxElem)) {
            //                    iterator.remove();
            //                }
            //            }

public int findHighestCost() {
        if (flagCreateReport) {
            List<Table> result = new ArrayList<>(table);
            Map<Integer, Double> drinksMap = result.stream()
                    .filter(i -> i.getCategory().startsWith("DRINKS#"))
                    .collect(Collectors.toMap(
                            table -> Integer.parseInt(table.getCategory().substring("DRINKS#".length())),
                            table -> table.getQuantity() * table.getPrice()
                    ));
            System.out.println(drinksMap);
            int key = -1;
            double value = -1.00;
            for (Map.Entry<Integer, Double> elem : drinksMap.entrySet()) {
                int elemKey = elem.getKey();
                double elemValue = elem.getValue();
                System.out.println(elemKey + " : " + elemValue);
                if (value > elemValue) {
                    value = elemValue;
                    key = elemKey;
                }
            }
            System.out.println(key + " : " + value);
            return key;
        }
        return -1;
    }


    public Map<String, Double> mostExpensiveSNACKS() {
            if (flagCreateReport) {
                List<Table> tables = new ArrayList<>(table);
                Map<String, Double> resultMap = tables.stream().
                        filter(i -> i.getCategory().startsWith("SNACKS"))
                        .collect(Collectors.toMap(Table::getCategory, Table::getPrice, Double::max));
                double maxPrice = resultMap.values().stream().mapToDouble(Double::doubleValue).max().orElse(0.0);
                resultMap = resultMap.entrySet().stream().filter(entry -> entry.getValue() == maxPrice)
                        .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
                return resultMap;
            }
            return null;
        }





//        int[] drinks = {2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 59, 62, 65, 68, 71,
//                74, 77, 80, 83, 86, 89, 92, 95, 98, 101, 104, 107, 110, 113, 116, 119, 122, 125, 128, 131, 134, 137,
//                140, 143, 146, 149, 152, 155, 158, 161, 164, 167, 170, 173, 176, 179, 182, 185, 188, 191, 194, 197, 200};
//        System.out.println("DRINKS: " + drinks.length);
//        int[] snacks = {3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72,
//                75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 117, 120, 123, 126, 129, 132, 135, 138,
//                141, 144, 147, 150, 153, 156, 159, 162, 165, 168, 171, 174, 177, 180, 183, 186, 189, 192, 195, 198};
//        System.out.println("SNACKS: " + snacks.length);
//        int[] food = {1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73,
//                76, 79, 82, 85, 88, 91, 94, 97, 100, 103, 106, 109, 112, 115, 118, 121, 124, 127, 130, 133, 136, 139,
//                142, 145, 148, 151, 154, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193, 196, 199};
//        System.out.println("FOOD: " + food.length);
//        System.out.println(food.length + snacks.length + drinks.length);


public List<Table> findHighestCost() {
        if (flagCreateReport) {
            List<Table> result = new ArrayList<>();
            int maxKey = 0;
            double maxCost = 0.00;
            Table maxElem = null;
            for (Table i : table) {
                double cost = i.getPrice() * i.getQuantity();
                if (cost > maxCost) {
                    maxCost = cost;
                    maxKey = table.indexOf(i);
                    maxElem = table.get(maxKey);
                }
            }
            result.add(maxElem);
            return result;
        }
        return null;
    }

    //            String changedCategory = food.getCategory().substring(0, food.getCategory().indexOf("#"));
    //            String changedName = food.getName().substring(0, food.getName().indexOf("#"));
    //            String changedFactory = food.getFactory().substring(0, food.getFactory().indexOf("#"));

    //            String changedCategory = snack.getCategory().substring(0, snack.getCategory().indexOf("#"));
    //            String changedName = snack.getName().substring(0, snack.getName().indexOf("#"));
    //            String changedFactory = snack.getFactory().substring(0, snack.getFactory().indexOf("#"));

    //            String changedCategory = drink.getCategory().substring(0, drink.getCategory().indexOf("#"));
    //            String changedName = drink.getName().substring(0, drink.getName().indexOf("#"));
    //            String changedFactory = drink.getFactory().substring(0, drink.getFactory().indexOf("#"));

    //        System.out.println("metod: " + drinks.get(3).getPrice());
    //        System.out.println(drinks.get(0));

    //        System.out.println(foods.get(0));
    //        System.out.println(snacks.get(0));

    //                System.out.println(count + " Name: " + i + " Total Cost: " + sum);