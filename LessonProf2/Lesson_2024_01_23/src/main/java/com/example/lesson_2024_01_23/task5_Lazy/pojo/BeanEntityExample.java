package com.example.lesson_2024_01_23.task5_Lazy.pojo;


import jakarta.persistence.Entity;
import jakarta.persistence.Id;

@Entity
public class BeanEntityExample {
    @Id
    private Long id;
    private String description;
    private String name;

    public BeanEntityExample() {
    }
}
// ===================================================================================
// Чтобы класс мог быть сущностью в JPA, к нему предъявляются определенные требования:
// ===================================================================================
// Пустой конструктор:
// ===================================================================================
// Класс-сущность должен иметь пустой (без аргументов) конструктор, который может быть
// public или protected. Это нужно для создания экземпляра объекта при его загрузке из
// базы данных.
// ===================================================================================
// Не может быть вложенным, интерфейсом или enum:
// ===================================================================================
// Класс-сущность не может быть вложенным, интерфейсом или enum. Он должен быть простым
// классом.
// ===================================================================================
// Не может быть final и не может содержать final-полей/свойств:
// ===================================================================================
// Класс-сущность не может быть объявлен как final, и он не должен содержать final-полей
// или свойств. Это связано с тем, что JPA должен иметь возможность создавать прокси-объекты
// для управления состоянием сущности.
// ===================================================================================
// Должен содержать хотя бы одно @Id-поле:
// ===================================================================================
// Класс-сущность должен содержать хотя бы одно поле, помеченное аннотацией @Id.
// Это поле будет использоваться в качестве первичного ключа для сущности в базе данных.
// ===================================================================================
// ===================================================================================
// ORM-библиотека (Object-Relational Mapping):
// ===================================================================================
// ORM-библиотека — это инструмент, который позволяет работать с базой данных, используя объектно-ориентированный
// подход, а не реляционный. Она предоставляет механизмы для отображения объектов вашего приложения на записи в базе
// данных и обратно. Примеры ORM-библиотек: Hibernate, EclipseLink, MyBatis и др.
// ===================================================================================
// Java Persistence API (JPA):
// ===================================================================================
// JPA — это стандарт Java EE (и Java SE) для работы с объектно-реляционными базами данных. Он определяет интерфейсы
// и спецификации для работы с ORM-библиотеками в Java-приложениях. JPA предоставляет абстракцию для работы с базами
// данных с использованием объектов, управление жизненным циклом сущностей, язык запросов JPQL
// (Java Persistence Query Language) и другие функции для упрощения взаимодействия с базой данных.
// Различные ORM-библиотеки, такие как Hibernate и EclipseLink, реализуют стандарт JPA. Таким образом,
// ORM-библиотека — это конкретная реализация механизмов отображения объектов на базу данных,
// в то время как JPA — это стандарт, который определяет API и правила для работы с объектно-реляционными
// данными в Java. Вы можете использовать JPA для написания кода, который будет совместим с различными
// ORM-библиотеками, а затем выбрать конкретную библиотеку в зависимости от ваших требований и предпочтений.
